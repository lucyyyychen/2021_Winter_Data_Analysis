# -*- coding: utf-8 -*-
"""VGG_fc2_DIMISION_REDUCTION_with_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11GN4c4j9K-0SPFnX4QS9eAHi3Z6ZP2di
"""

from google.colab import drive
drive.mount('/content/drive')
import numpy as np
all_features_fc2 = np.load('/content/drive/MyDrive/Colab_Notebooks/DL_Final_Project/VGG_features/fc2_4096/all_features_fc2.npy')

import keras
from keras.applications.vgg16 import VGG16, preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model, Sequential
from keras.layers import AveragePooling2D, Dense, Dropout, Flatten, Input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

vgg16_model = VGG16(include_top = True, input_shape=(224, 224, 3))

model = Sequential()
# model.summary()

for layer in vgg16_model.layers[:-1]:
    model.add(layer)
# model.summary()

for layer in model.layers:
    layer.trainable = False

model.summary()

y_train_price = pd.read_csv('y_train.csv')
y_valid_price = pd.DataFrame('y_valid.csv')
y_test_price = pd.DataFrame('y_test.csv')

from sklearn.metrics import mean_squared_error
def rmse(y_test, y_predict):
  return np.sqrt(mean_squared_error(y_test,y_predict))

# get the best param
all_params = []
# print(x_train[0], y_train[0], x_valid[0], y_valid[0])
for d1 in [4096, 2048, 1024, 512, 256, 128, 64]:
  for d2 in [4096, 2048, 1024, 512, 256, 128, 64]:
    for d3 in [64, 32, 16, 8]:
      model1 = Sequential()
      model1.add(Dense(d1, activation='PReLU'))
      model1.add(Dense(d2, activation='PReLU'))
      model1.add(Dense(d3))
      features_loop_reg = model1.predict(all_features_fc2)
      print('d1:', d1)
      print('d2:', d2)
      print('d3:', d3)
      ##############################################################################
      # RANDOM FOREST
      # validation
      from sklearn.ensemble import RandomForestRegressor
      RF_reg_model = RandomForestRegressor(n_estimators=20, random_state=42)
      x_train = features_loop_reg[:10049]
      y_train = y_train_price
      RF_reg_model.fit(x_train, y_train)

      x_valid = features_loop_reg[10049:11149]
      y_valid = y_valid_price
      y_reg_pred = RF_reg_model.predict(x_valid)
      rmse_val = rmse(y_valid, y_reg_pred)
      print('RMSE:', rmse_val)
      all_params.append((d1, d2, d3, rmse))
      print('--------------------------------------')

model2 = Sequential()
model2.add(Dense(4096, activation='PReLU'))
model2.add(Dense(1024, activation='PReLU'))
model2.add(Dense(64))
features_final_64 = model2.predict(all_features_fc2)

from numpy import savetxt
savetxt('model_reduced_features_64_final.csv', features_final_64, delimiter=',')

